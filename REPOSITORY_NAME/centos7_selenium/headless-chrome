#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import time
import chromedriver_binary
from selenium import webdriver


def parser():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('-u', '--url', help='URL', required=True)
    parser.add_argument('-o', '--output', help='Output File', required=False)
    parser.add_argument('-a', '--useragent', help='User Agent', required=False)
    parser.add_argument('-x', '--proxy', help='Proxy', required=False)
    parser.add_argument('-w', '--windowsize', help='WindowSize', required=False)
    parser.add_argument('-s', '--screenshot', help='ScreenShot', required=False)
    return parser.parse_args()


def main(args):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-setuid-sandbox')
    options.add_argument('--no-first-run')
    options.add_argument('--no-zygote')
    options.add_argument('--single-process')
    options.add_argument('--lang=ja')
    options.add_argument('--user-data-dir=/tmp/chrome')
    if not args.useragent is None:
        options.add_argument('--user-agent=%s' % args.useragent)
    if not args.proxy is None:
        options.add_argument('--proxy-server=http://%s' % args.proxy)
    if not args.windowsize is None:
        options.add_argument('--window-size=%s' % args.windowsize)
    driver = webdriver.Chrome(options=options)
    driver.get(args.url)
    time.sleep(4)
    if args.windowsize is None:
        page_width = driver.execute_script('return document.body.scrollWidth')
        page_height = driver.execute_script('return document.body.scrollHeight')
        driver.set_window_size(page_width, page_height)
        time.sleep(4)
    # print(driver.title)
    if args.output is None:
        print(driver.page_source)
    else:
        with open(args.output, "w") as f:
            f.write(driver.page_source)
    if not args.screenshot is None:
        driver.save_screenshot(args.screenshot)
    driver.quit()


if __name__ == '__main__':
    main(parser())

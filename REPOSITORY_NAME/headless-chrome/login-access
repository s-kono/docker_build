#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import time
# import chromedriver_binary
from selenium import webdriver
import requests


def parser():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('-l', '--loginurl', help='LoginURL', required=True)
    parser.add_argument('-u', '--url', help='URL', required=True)
    parser.add_argument('-n', '--name', help='AccountName', required=True)
    parser.add_argument('-p', '--password', help='Password', required=True)
    parser.add_argument('-o', '--output', help='Output File', required=False)
    parser.add_argument('-a', '--useragent', help='User Agent', required=False)
    parser.add_argument('-x', '--proxy', help='Proxy', required=False)
    return parser.parse_args()


def main(args):
    options = webdriver.ChromeOptions()
    options.add_argument('--window-size=800,600')
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-setuid-sandbox')
    options.add_argument('--no-first-run')
    options.add_argument('--no-zygote')
    options.add_argument('--single-process')
    options.add_argument('--lang=ja')
    options.add_argument('--user-data-dir=/tmp/chrome')
    if args.useragent is None:
        header_dict = None
    else:
        header_dict = {'User-Agent': args.useragent}
        options.add_argument('--user-agent=' + args.useragent)
    if args.proxy is None:
        proxy_dict = None
    else:
        options.add_argument('--proxy-server=http://%s' % args.proxy)
        proxy_dict = {
          "http": args.proxy,
          "https": args.proxy,
        }
    post_dict = {
      'username': args.name,
      'password': args.password,
    }

    session = requests.session()
    driver = webdriver.Chrome(options=options)
    driver.get(args.loginurl)
    [session.cookies.set(c['name'], c['value']) for c in driver.get_cookies()]

    response = session.post(
      args.loginurl, data=post_dict, proxies=proxy_dict, headers=header_dict
    )
    # print(response.text)
    response.raise_for_status()
    # print(session.cookies)

    c_dict = session.cookies.get_dict()
    cookie = [{'name': name, 'value': value} for name, value in c_dict.items()]
    # print(cookie)
    [driver.add_cookie(c) for c in cookie]

    # driver.get(args.url)
    # time.sleep(2)
    # page_width = driver.execute_script('return document.body.scrollWidth')
    # page_height = driver.execute_script('return document.body.scrollHeight')
    # driver.set_window_size(page_width, page_height)

    driver.get(args.url)
    time.sleep(4)
    if args.output is None:
        print(driver.page_source)
    else:
        with open(args.output, "w") as f:
            f.write(driver.page_source)
    # driver.save_screenshot('/path/to/mount/screenshot.png')
    print(driver.title)
    driver.quit()


if __name__ == '__main__':
    main(parser())
